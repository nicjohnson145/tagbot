// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	git "github.com/nicjohnson145/tagbot/git"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// CommitsSinceHash provides a mock function with given fields: hash
func (_m *Repo) CommitsSinceHash(hash string) ([]string, error) {
	ret := _m.Called(hash)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_CommitsSinceHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitsSinceHash'
type Repo_CommitsSinceHash_Call struct {
	*mock.Call
}

// CommitsSinceHash is a helper method to define mock.On call
//   - hash string
func (_e *Repo_Expecter) CommitsSinceHash(hash interface{}) *Repo_CommitsSinceHash_Call {
	return &Repo_CommitsSinceHash_Call{Call: _e.mock.On("CommitsSinceHash", hash)}
}

func (_c *Repo_CommitsSinceHash_Call) Run(run func(hash string)) *Repo_CommitsSinceHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repo_CommitsSinceHash_Call) Return(_a0 []string, _a1 error) *Repo_CommitsSinceHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ForcePushTags provides a mock function with given fields:
func (_m *Repo) ForcePushTags() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_ForcePushTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForcePushTags'
type Repo_ForcePushTags_Call struct {
	*mock.Call
}

// ForcePushTags is a helper method to define mock.On call
func (_e *Repo_Expecter) ForcePushTags() *Repo_ForcePushTags_Call {
	return &Repo_ForcePushTags_Call{Call: _e.mock.On("ForcePushTags")}
}

func (_c *Repo_ForcePushTags_Call) Run(run func()) *Repo_ForcePushTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repo_ForcePushTags_Call) Return(_a0 error) *Repo_ForcePushTags_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetHashForBranch provides a mock function with given fields: branch
func (_m *Repo) GetHashForBranch(branch string) (string, error) {
	ret := _m.Called(branch)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(branch)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_GetHashForBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHashForBranch'
type Repo_GetHashForBranch_Call struct {
	*mock.Call
}

// GetHashForBranch is a helper method to define mock.On call
//   - branch string
func (_e *Repo_Expecter) GetHashForBranch(branch interface{}) *Repo_GetHashForBranch_Call {
	return &Repo_GetHashForBranch_Call{Call: _e.mock.On("GetHashForBranch", branch)}
}

func (_c *Repo_GetHashForBranch_Call) Run(run func(branch string)) *Repo_GetHashForBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repo_GetHashForBranch_Call) Return(_a0 string, _a1 error) *Repo_GetHashForBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IsTagbotDisabled provides a mock function with given fields:
func (_m *Repo) IsTagbotDisabled() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_IsTagbotDisabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTagbotDisabled'
type Repo_IsTagbotDisabled_Call struct {
	*mock.Call
}

// IsTagbotDisabled is a helper method to define mock.On call
func (_e *Repo_Expecter) IsTagbotDisabled() *Repo_IsTagbotDisabled_Call {
	return &Repo_IsTagbotDisabled_Call{Call: _e.mock.On("IsTagbotDisabled")}
}

func (_c *Repo_IsTagbotDisabled_Call) Run(run func()) *Repo_IsTagbotDisabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repo_IsTagbotDisabled_Call) Return(_a0 bool, _a1 error) *Repo_IsTagbotDisabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LatestTag provides a mock function with given fields:
func (_m *Repo) LatestTag() (*git.Tag, error) {
	ret := _m.Called()

	var r0 *git.Tag
	if rf, ok := ret.Get(0).(func() *git.Tag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_LatestTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestTag'
type Repo_LatestTag_Call struct {
	*mock.Call
}

// LatestTag is a helper method to define mock.On call
func (_e *Repo_Expecter) LatestTag() *Repo_LatestTag_Call {
	return &Repo_LatestTag_Call{Call: _e.mock.On("LatestTag")}
}

func (_c *Repo_LatestTag_Call) Run(run func()) *Repo_LatestTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repo_LatestTag_Call) Return(_a0 *git.Tag, _a1 error) *Repo_LatestTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// MakeTagHead provides a mock function with given fields: name
func (_m *Repo) MakeTagHead(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_MakeTagHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeTagHead'
type Repo_MakeTagHead_Call struct {
	*mock.Call
}

// MakeTagHead is a helper method to define mock.On call
//   - name string
func (_e *Repo_Expecter) MakeTagHead(name interface{}) *Repo_MakeTagHead_Call {
	return &Repo_MakeTagHead_Call{Call: _e.mock.On("MakeTagHead", name)}
}

func (_c *Repo_MakeTagHead_Call) Run(run func(name string)) *Repo_MakeTagHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repo_MakeTagHead_Call) Return(_a0 error) *Repo_MakeTagHead_Call {
	_c.Call.Return(_a0)
	return _c
}

// PushTags provides a mock function with given fields:
func (_m *Repo) PushTags() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_PushTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushTags'
type Repo_PushTags_Call struct {
	*mock.Call
}

// PushTags is a helper method to define mock.On call
func (_e *Repo_Expecter) PushTags() *Repo_PushTags_Call {
	return &Repo_PushTags_Call{Call: _e.mock.On("PushTags")}
}

func (_c *Repo_PushTags_Call) Run(run func()) *Repo_PushTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repo_PushTags_Call) Return(_a0 error) *Repo_PushTags_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemakeTagHead provides a mock function with given fields: name
func (_m *Repo) RemakeTagHead(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_RemakeTagHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemakeTagHead'
type Repo_RemakeTagHead_Call struct {
	*mock.Call
}

// RemakeTagHead is a helper method to define mock.On call
//   - name string
func (_e *Repo_Expecter) RemakeTagHead(name interface{}) *Repo_RemakeTagHead_Call {
	return &Repo_RemakeTagHead_Call{Call: _e.mock.On("RemakeTagHead", name)}
}

func (_c *Repo_RemakeTagHead_Call) Run(run func(name string)) *Repo_RemakeTagHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repo_RemakeTagHead_Call) Return(_a0 error) *Repo_RemakeTagHead_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t mockConstructorTestingTNewRepo) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
