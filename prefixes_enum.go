// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.0
// Revision: bc24b100a9e3ef3c4271209e99c6ac57597446f3
// Build Date: 2022-08-03T22:36:20Z
// Built By: goreleaser

package main

import (
	"fmt"
	"strings"
)

const (
	// AuthMethodPublicKey is a AuthMethod of type public-key.
	AuthMethodPublicKey AuthMethod = "public-key"
	// AuthMethodToken is a AuthMethod of type token.
	AuthMethodToken AuthMethod = "token"
)

var _AuthMethodNames = []string{
	string(AuthMethodPublicKey),
	string(AuthMethodToken),
}

// AuthMethodNames returns a list of possible string values of AuthMethod.
func AuthMethodNames() []string {
	tmp := make([]string, len(_AuthMethodNames))
	copy(tmp, _AuthMethodNames)
	return tmp
}

// String implements the Stringer interface.
func (x AuthMethod) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x AuthMethod) IsValid() bool {
	_, err := ParseAuthMethod(string(x))
	return err == nil
}

var _AuthMethodValue = map[string]AuthMethod{
	"public-key": AuthMethodPublicKey,
	"token":      AuthMethodToken,
}

// ParseAuthMethod attempts to convert a string to a AuthMethod.
func ParseAuthMethod(name string) (AuthMethod, error) {
	if x, ok := _AuthMethodValue[name]; ok {
		return x, nil
	}
	return AuthMethod(""), fmt.Errorf("%s is not a valid AuthMethod, try [%s]", name, strings.Join(_AuthMethodNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x AuthMethod) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AuthMethod) UnmarshalText(text []byte) error {
	tmp, err := ParseAuthMethod(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// CommitPrefixFix is a CommitPrefix of type fix.
	CommitPrefixFix CommitPrefix = "fix"
	// CommitPrefixFeat is a CommitPrefix of type feat.
	CommitPrefixFeat CommitPrefix = "feat"
	// CommitPrefixChore is a CommitPrefix of type chore.
	CommitPrefixChore CommitPrefix = "chore"
	// CommitPrefixDocs is a CommitPrefix of type docs.
	CommitPrefixDocs CommitPrefix = "docs"
	// CommitPrefixStyle is a CommitPrefix of type style.
	CommitPrefixStyle CommitPrefix = "style"
	// CommitPrefixRefactor is a CommitPrefix of type refactor.
	CommitPrefixRefactor CommitPrefix = "refactor"
	// CommitPrefixPerf is a CommitPrefix of type perf.
	CommitPrefixPerf CommitPrefix = "perf"
	// CommitPrefixTest is a CommitPrefix of type test.
	CommitPrefixTest CommitPrefix = "test"
	// CommitPrefixCi is a CommitPrefix of type ci.
	CommitPrefixCi CommitPrefix = "ci"
	// CommitPrefixImprove is a CommitPrefix of type improve.
	CommitPrefixImprove CommitPrefix = "improve"
)

var _CommitPrefixNames = []string{
	string(CommitPrefixFix),
	string(CommitPrefixFeat),
	string(CommitPrefixChore),
	string(CommitPrefixDocs),
	string(CommitPrefixStyle),
	string(CommitPrefixRefactor),
	string(CommitPrefixPerf),
	string(CommitPrefixTest),
	string(CommitPrefixCi),
	string(CommitPrefixImprove),
}

// CommitPrefixNames returns a list of possible string values of CommitPrefix.
func CommitPrefixNames() []string {
	tmp := make([]string, len(_CommitPrefixNames))
	copy(tmp, _CommitPrefixNames)
	return tmp
}

// String implements the Stringer interface.
func (x CommitPrefix) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x CommitPrefix) IsValid() bool {
	_, err := ParseCommitPrefix(string(x))
	return err == nil
}

var _CommitPrefixValue = map[string]CommitPrefix{
	"fix":      CommitPrefixFix,
	"feat":     CommitPrefixFeat,
	"chore":    CommitPrefixChore,
	"docs":     CommitPrefixDocs,
	"style":    CommitPrefixStyle,
	"refactor": CommitPrefixRefactor,
	"perf":     CommitPrefixPerf,
	"test":     CommitPrefixTest,
	"ci":       CommitPrefixCi,
	"improve":  CommitPrefixImprove,
}

// ParseCommitPrefix attempts to convert a string to a CommitPrefix.
func ParseCommitPrefix(name string) (CommitPrefix, error) {
	if x, ok := _CommitPrefixValue[name]; ok {
		return x, nil
	}
	return CommitPrefix(""), fmt.Errorf("%s is not a valid CommitPrefix, try [%s]", name, strings.Join(_CommitPrefixNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x CommitPrefix) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CommitPrefix) UnmarshalText(text []byte) error {
	tmp, err := ParseCommitPrefix(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// RemoteTypeSsh is a RemoteType of type ssh.
	RemoteTypeSsh RemoteType = "ssh"
	// RemoteTypeHttps is a RemoteType of type https.
	RemoteTypeHttps RemoteType = "https"
)

var _RemoteTypeNames = []string{
	string(RemoteTypeSsh),
	string(RemoteTypeHttps),
}

// RemoteTypeNames returns a list of possible string values of RemoteType.
func RemoteTypeNames() []string {
	tmp := make([]string, len(_RemoteTypeNames))
	copy(tmp, _RemoteTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x RemoteType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x RemoteType) IsValid() bool {
	_, err := ParseRemoteType(string(x))
	return err == nil
}

var _RemoteTypeValue = map[string]RemoteType{
	"ssh":   RemoteTypeSsh,
	"https": RemoteTypeHttps,
}

// ParseRemoteType attempts to convert a string to a RemoteType.
func ParseRemoteType(name string) (RemoteType, error) {
	if x, ok := _RemoteTypeValue[name]; ok {
		return x, nil
	}
	return RemoteType(""), fmt.Errorf("%s is not a valid RemoteType, try [%s]", name, strings.Join(_RemoteTypeNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x RemoteType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RemoteType) UnmarshalText(text []byte) error {
	tmp, err := ParseRemoteType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// VersionBumpNone is a VersionBump of type None.
	VersionBumpNone VersionBump = iota
	// VersionBumpPatch is a VersionBump of type Patch.
	VersionBumpPatch
	// VersionBumpMinor is a VersionBump of type Minor.
	VersionBumpMinor
	// VersionBumpMajor is a VersionBump of type Major.
	VersionBumpMajor
)

const _VersionBumpName = "nonepatchminormajor"

var _VersionBumpNames = []string{
	_VersionBumpName[0:4],
	_VersionBumpName[4:9],
	_VersionBumpName[9:14],
	_VersionBumpName[14:19],
}

// VersionBumpNames returns a list of possible string values of VersionBump.
func VersionBumpNames() []string {
	tmp := make([]string, len(_VersionBumpNames))
	copy(tmp, _VersionBumpNames)
	return tmp
}

var _VersionBumpMap = map[VersionBump]string{
	VersionBumpNone:  _VersionBumpName[0:4],
	VersionBumpPatch: _VersionBumpName[4:9],
	VersionBumpMinor: _VersionBumpName[9:14],
	VersionBumpMajor: _VersionBumpName[14:19],
}

// String implements the Stringer interface.
func (x VersionBump) String() string {
	if str, ok := _VersionBumpMap[x]; ok {
		return str
	}
	return fmt.Sprintf("VersionBump(%d)", x)
}

var _VersionBumpValue = map[string]VersionBump{
	_VersionBumpName[0:4]:   VersionBumpNone,
	_VersionBumpName[4:9]:   VersionBumpPatch,
	_VersionBumpName[9:14]:  VersionBumpMinor,
	_VersionBumpName[14:19]: VersionBumpMajor,
}

// ParseVersionBump attempts to convert a string to a VersionBump.
func ParseVersionBump(name string) (VersionBump, error) {
	if x, ok := _VersionBumpValue[name]; ok {
		return x, nil
	}
	return VersionBump(0), fmt.Errorf("%s is not a valid VersionBump, try [%s]", name, strings.Join(_VersionBumpNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x VersionBump) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *VersionBump) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseVersionBump(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
